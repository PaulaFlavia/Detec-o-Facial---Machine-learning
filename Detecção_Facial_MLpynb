# Importar as bibliotecas necessárias
import tensorflow as tf
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Carregar o modelo treinado para classificação de dígitos

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Faça o upload da imagem da figura1 para o Colab (se necessário)
from google.colab import files
uploaded = files.upload()

# Carregar o classificador Haar Cascade para detecção de rostos
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')


# Carregar o modelo treinado para classificação de dígitos


# Carregue o conjunto de dados (por exemplo, o MNIST)
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# Normalize os dados de entrada
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

# Defina a arquitetura da rede neural
model = keras.Sequential(
    [
        layers.Flatten(input_shape=(28, 28)),
        layers.Dense(128, activation="relu"),
        layers.Dense(10),
    ]
)

# Compile o modelo
model.compile(optimizer="adam", loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=["accuracy"])

# Treine o modelo
model.fit(x_train, y_train, epochs= 6, validation_data=(x_test, y_test))

# Avalie o modelo
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print("Test accuracy:", test_acc)


# Definir as classes predefinidas
labels = ['amy(0.38)', 'raj(0.47)', 'bernadette(0.43)', 'sheldon(0.32)', 'penny(0.49)', 'leonard(0.48)']

# Carregar a imagem
image = cv2.imread('figura1.png')

# Converter a imagem para escala de cinza
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)


# Detectar as faces na imagem
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=3)

# Iterar sobre as faces detectadas
for (x, y, w, h) in faces:
    # Desenhar retângulo na imagem original
    cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Recortar a imagem da face
    face_img = gray[y:y+h, x:x+w]

    # Redimensionar a imagem para a entrada do modelo de classificação
    resized_img = cv2.resize(face_img, (28, 28), interpolation = cv2.INTER_AREA)

    # Expandir as dimensões da imagem para a entrada do modelo de classificação
    resized_img = np.expand_dims(resized_img, axis=-1)
    resized_img = np.expand_dims(resized_img, axis=0)

    # Executar a classificação da face
    predictions = model.predict(resized_img)

    # Obter a classe com a maior probabilidade
    label = np.argmax(predictions)

    # Verificar se o índice da classe está dentro do intervalo do rótulo
    if label < len(labels):
        # Desenhar retângulo e rótulo da classe na imagem
        cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(img, labels[label], (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
    else:
        print("Erro: índice de classe fora do intervalo do rótulo")


for i, (x, y, w, h) in enumerate(faces):
    # Desenhar retângulo na imagem
    cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)

    # Adicionar rótulo na imagem
    label = labels[i]
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(image, label, (x, y-10), font, 0.9, (0, 255, 0), 2)


from google.colab.patches import cv2_imshow
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()
